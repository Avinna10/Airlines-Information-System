/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Airlines;

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Acer
 */
public class AirlineInfo extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public AirlineInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryBg = new javax.swing.ButtonGroup();
        statusBg = new javax.swing.ButtonGroup();
        mainPnl = new javax.swing.JTabbedPane();
        homePnl = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();
        addValueBtn = new javax.swing.JButton();
        addPnl = new javax.swing.JPanel();
        titleLbl2 = new javax.swing.JLabel();
        idTf = new javax.swing.JTextField();
        idLbl = new javax.swing.JLabel();
        routeLbl = new javax.swing.JLabel();
        routeTf = new javax.swing.JTextField();
        companyLbl = new javax.swing.JLabel();
        companyCb = new javax.swing.JComboBox<>();
        categoryLbl = new javax.swing.JLabel();
        priceLbl = new javax.swing.JLabel();
        priceTf = new javax.swing.JTextField();
        seatLbl = new javax.swing.JLabel();
        seatTf = new javax.swing.JTextField();
        statusLbl = new javax.swing.JLabel();
        domesticRb = new javax.swing.JRadioButton();
        internationalRb = new javax.swing.JRadioButton();
        availableRb = new javax.swing.JRadioButton();
        notAvailableRb = new javax.swing.JRadioButton();
        addBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        viewTableBtn = new javax.swing.JButton();
        updateTf = new javax.swing.JTextField();
        updateTxt = new javax.swing.JLabel();
        tablePnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        airlineTable = new javax.swing.JTable();
        title3Lbl = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        goToAddBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        searchValue = new javax.swing.JTextField();
        companyOption = new javax.swing.JComboBox<>();
        search2Btn = new javax.swing.JButton();
        sortCB = new javax.swing.JComboBox<>();
        sortLbl = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Airlines Information System");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homePnl.setBackground(new java.awt.Color(0, 153, 153));
        homePnl.setName(""); // NOI18N

        title.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Kathmandu Airlines");

        viewBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewBtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        viewBtn.setForeground(new java.awt.Color(0, 153, 153));
        viewBtn.setText("View Table");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        addValueBtn.setBackground(new java.awt.Color(255, 255, 255));
        addValueBtn.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        addValueBtn.setForeground(new java.awt.Color(0, 153, 153));
        addValueBtn.setText("Add Value");
        addValueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addValueBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homePnlLayout = new javax.swing.GroupLayout(homePnl);
        homePnl.setLayout(homePnlLayout);
        homePnlLayout.setHorizontalGroup(
            homePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePnlLayout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addGroup(homePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addValueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(284, Short.MAX_VALUE))
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        homePnlLayout.setVerticalGroup(
            homePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePnlLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addValueBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );

        mainPnl.addTab("home", homePnl);

        addPnl.setBackground(new java.awt.Color(0, 153, 153));
        addPnl.setName(""); // NOI18N

        titleLbl2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        titleLbl2.setForeground(new java.awt.Color(255, 255, 255));
        titleLbl2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl2.setText("Kathmandu Airlines");

        idTf.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        idTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTfKeyPressed(evt);
            }
        });

        idLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        idLbl.setForeground(new java.awt.Color(255, 255, 255));
        idLbl.setText("Flight ID:");

        routeLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        routeLbl.setForeground(new java.awt.Color(255, 255, 255));
        routeLbl.setText("Flight Route:");

        routeTf.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        routeTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                routeTfKeyPressed(evt);
            }
        });

        companyLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        companyLbl.setForeground(new java.awt.Color(255, 255, 255));
        companyLbl.setText("Company:");

        companyCb.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        companyCb.setForeground(new java.awt.Color(0, 153, 153));
        companyCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Qatar Airways", "Buddha Airlines", "Yeti Airlines", "Nepal Airlines", "Fly Emirates" }));

        categoryLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        categoryLbl.setForeground(new java.awt.Color(255, 255, 255));
        categoryLbl.setText("Catergory:");

        priceLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        priceLbl.setForeground(new java.awt.Color(255, 255, 255));
        priceLbl.setText("Price:");

        priceTf.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        priceTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceTfKeyPressed(evt);
            }
        });

        seatLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        seatLbl.setForeground(new java.awt.Color(255, 255, 255));
        seatLbl.setText("Number of Seats:");

        seatTf.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        seatTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                seatTfKeyPressed(evt);
            }
        });

        statusLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        statusLbl.setForeground(new java.awt.Color(255, 255, 255));
        statusLbl.setText("Status:");

        categoryBg.add(domesticRb);
        domesticRb.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        domesticRb.setForeground(new java.awt.Color(255, 255, 255));
        domesticRb.setSelected(true);
        domesticRb.setText("Domestic");
        domesticRb.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        domesticRb.setActionCommand("Domestic");

        categoryBg.add(internationalRb);
        internationalRb.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        internationalRb.setForeground(new java.awt.Color(255, 255, 255));
        internationalRb.setText("International");
        internationalRb.setActionCommand("International");

        statusBg.add(availableRb);
        availableRb.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        availableRb.setForeground(new java.awt.Color(255, 255, 255));
        availableRb.setSelected(true);
        availableRb.setText("Available");
        availableRb.setMinimumSize(new java.awt.Dimension(0, 0));
        availableRb.setActionCommand("Available");

        statusBg.add(notAvailableRb);
        notAvailableRb.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        notAvailableRb.setForeground(new java.awt.Color(255, 255, 255));
        notAvailableRb.setText("Not Available");
        notAvailableRb.setActionCommand("Not Available");

        addBtn.setBackground(new java.awt.Color(255, 255, 255));
        addBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        addBtn.setForeground(new java.awt.Color(0, 153, 153));
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(255, 255, 255));
        clearBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(0, 153, 153));
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(255, 255, 255));
        updateBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(0, 153, 153));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        viewTableBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewTableBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        viewTableBtn.setForeground(new java.awt.Color(0, 153, 153));
        viewTableBtn.setText("View Table");
        viewTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTableBtnActionPerformed(evt);
            }
        });

        updateTf.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        updateTf.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Flight ID", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(0, 153, 153))); // NOI18N

        updateTxt.setForeground(new java.awt.Color(255, 255, 255));
        updateTxt.setText("* Enter the Flight ID of the row you wish to update.");

        javax.swing.GroupLayout addPnlLayout = new javax.swing.GroupLayout(addPnl);
        addPnl.setLayout(addPnlLayout);
        addPnlLayout.setHorizontalGroup(
            addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPnlLayout.createSequentialGroup()
                .addComponent(titleLbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(addPnlLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPnlLayout.createSequentialGroup()
                        .addComponent(statusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPnlLayout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addPnlLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(availableRb, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(notAvailableRb, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addPnlLayout.createSequentialGroup()
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(addPnlLayout.createSequentialGroup()
                                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addPnlLayout.createSequentialGroup()
                                        .addComponent(priceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(priceTf, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addPnlLayout.createSequentialGroup()
                                        .addComponent(categoryLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(domesticRb, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(internationalRb, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(addPnlLayout.createSequentialGroup()
                                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(companyLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(idLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(idTf)
                                            .addComponent(companyCb, 0, 180, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPnlLayout.createSequentialGroup()
                                        .addComponent(routeLbl)
                                        .addGap(26, 26, 26)
                                        .addComponent(routeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPnlLayout.createSequentialGroup()
                                        .addComponent(seatLbl)
                                        .addGap(18, 18, 18)
                                        .addComponent(seatTf, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(updateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(addPnlLayout.createSequentialGroup()
                                    .addComponent(updateTf, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(296, 296, 296)
                                    .addComponent(viewTableBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(105, 105, 105))))
        );
        addPnlLayout.setVerticalGroup(
            addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPnlLayout.createSequentialGroup()
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idLbl))
                        .addGap(18, 18, 18)
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(companyLbl)
                            .addComponent(companyCb, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryLbl)
                            .addComponent(domesticRb)
                            .addComponent(internationalRb))
                        .addGap(26, 26, 26)
                        .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceLbl)
                            .addComponent(priceTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(seatLbl)
                            .addComponent(seatTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(routeLbl)
                        .addComponent(routeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLbl)
                    .addComponent(availableRb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notAvailableRb))
                .addGap(18, 18, 18)
                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearBtn)
                    .addComponent(addBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn)
                    .addComponent(viewTableBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateTxt)
                .addGap(0, 27, Short.MAX_VALUE))
        );

        mainPnl.addTab("add", addPnl);

        tablePnl.setBackground(new java.awt.Color(0, 153, 153));

        airlineTable.setBorder(new javax.swing.border.MatteBorder(null));
        airlineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"U4061", "Ktm - Dhangadhi", "Buddha Airlines", "Domestic", "4500", "95", "Available"},
                {"QR0651", "Ktm - Tokya", "Qatar Airways", "International", "218310", "150", "Not Available"},
                {"U4652", "Ktm - Lukla", "Buddha Airlines", "Domestic", "10570", "85", "Available"},
                {"EK787", "Ktm - Delhi", "Fly Emirates", "International", "10986", "140", "Not Available"},
                {"RA710", "Ktm - Nepalgunj", "Nepal Airlines", "Domestic", "3495", "105", "Available"},
                {"YT1301", "Ktm - Pokhara", "Yeti Airlines", "Domestic", "2500", "105", "Available"},
                {"Q1567", "Ktm - Madrid", "Qatar Airways", "International", "66545", "140", "Available"},
                {"U4618", "Ktm - Bharatpur", "Buddha Airlines", "Domestic", "2500", "110", "Not Available"},
                {"RA187", "Ktm - Dang", "Nepal Airlines", "Domestic", "3500", "95", "Available"},
                {"EK538", "Ktm - Atka", "Fly Emirates", "International", "125090", "155", "Available"},
                {"YT671", "Ktm - Jumla", "Yeti Airlines", "Domestic", "5500", "80", "Not Available"},
                {"QR0687", "Ktm - Melbourne", "Qatar Airways", "International", "196064", "165", "Available"}
            },
            new String [] {
                "Flight ID", "Flight Route", "Company", "Category", "Price", "No. of Seat", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        airlineTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(airlineTable);
        if (airlineTable.getColumnModel().getColumnCount() > 0) {
            airlineTable.getColumnModel().getColumn(0).setResizable(false);
            airlineTable.getColumnModel().getColumn(1).setResizable(false);
            airlineTable.getColumnModel().getColumn(2).setResizable(false);
            airlineTable.getColumnModel().getColumn(3).setResizable(false);
            airlineTable.getColumnModel().getColumn(4).setResizable(false);
            airlineTable.getColumnModel().getColumn(5).setResizable(false);
            airlineTable.getColumnModel().getColumn(6).setResizable(false);
        }

        title3Lbl.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        title3Lbl.setForeground(new java.awt.Color(255, 255, 255));
        title3Lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title3Lbl.setText("Kathmandu Airlines");

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(0, 153, 153));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        goToAddBtn.setBackground(new java.awt.Color(255, 255, 255));
        goToAddBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        goToAddBtn.setForeground(new java.awt.Color(0, 153, 153));
        goToAddBtn.setText("Add Value");
        goToAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToAddBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(255, 255, 255));
        searchBtn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(0, 153, 153));
        searchBtn.setText("Search Flight");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        searchValue.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        searchValue.setForeground(new java.awt.Color(0, 153, 153));
        searchValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Price", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10), new java.awt.Color(0, 153, 153))); // NOI18N
        searchValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchValueKeyPressed(evt);
            }
        });

        companyOption.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        companyOption.setForeground(new java.awt.Color(0, 153, 153));
        companyOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose any Company", "Qatar Airways", "Buddha Airlines", "Yeti Airlines", "Nepal Airlines", "Fly Emirates" }));

        search2Btn.setBackground(new java.awt.Color(255, 255, 255));
        search2Btn.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        search2Btn.setForeground(new java.awt.Color(0, 153, 153));
        search2Btn.setText("Flights Available in the Company ");
        search2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search2BtnActionPerformed(evt);
            }
        });

        sortCB.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        sortCB.setForeground(new java.awt.Color(0, 153, 153));
        sortCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose any option", "Price Ascending", "Price Descending", "Company Descending", "Company Ascending" }));
        sortCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCBActionPerformed(evt);
            }
        });

        sortLbl.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        sortLbl.setForeground(new java.awt.Color(255, 255, 255));
        sortLbl.setText("Sort By:");

        javax.swing.GroupLayout tablePnlLayout = new javax.swing.GroupLayout(tablePnl);
        tablePnl.setLayout(tablePnlLayout);
        tablePnlLayout.setHorizontalGroup(
            tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePnlLayout.createSequentialGroup()
                .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(title3Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tablePnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tablePnlLayout.createSequentialGroup()
                                .addComponent(sortLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sortCB, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(goToAddBtn))
                            .addGroup(tablePnlLayout.createSequentialGroup()
                                .addComponent(companyOption, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(search2Btn)
                                .addGap(0, 223, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePnlLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn)))))
                .addContainerGap())
        );
        tablePnlLayout.setVerticalGroup(
            tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title3Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchBtn)
                    .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(companyOption, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search2Btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablePnlLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(goToAddBtn)
                            .addComponent(deleteBtn)))
                    .addGroup(tablePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sortLbl)
                        .addComponent(sortCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(725, 725, 725))
        );

        mainPnl.addTab("table", tablePnl);

        getContentPane().add(mainPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -39, 750, 510));

        fileMenu.setText("File");

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenu.setText("Open file");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                helpMenuMenuSelected(evt);
            }
        });
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addValueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addValueBtnActionPerformed
        mainPnl.setSelectedIndex(1); 
    }//GEN-LAST:event_addValueBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        mainPnl.setSelectedIndex(2);
    }//GEN-LAST:event_viewBtnActionPerformed

    private void viewTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTableBtnActionPerformed
        mainPnl.setSelectedIndex(2);
    }//GEN-LAST:event_viewTableBtnActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        if (searchValue.getText().equals("")){      //checks for empty text field
            JOptionPane.showMessageDialog(rootPane, "Enter the search value.", "Value Not Found", 2);
        } else {
            //getting number of rows in table
            int rowCount = airlineTable.getRowCount();
            //declaring arrays
            String[] flightID = new String[rowCount];
            String[] flightRoute = new String[rowCount];
            String[] company = new String[rowCount];
            int[] priceTable = new int[rowCount];
                
            //initializing arrays with the data from the table
            for (int i = 0; i < rowCount; i++){
                String ID = (String) airlineTable.getValueAt(i, 0);
                String route = (String) airlineTable.getValueAt(i, 1);
                String companyName = (String) airlineTable.getValueAt(i, 2);
                String fee = (String) airlineTable.getValueAt(i, 4);
                flightID[i] = ID;
                flightRoute[i] = route;
                company[i] = companyName;
                priceTable[i] = Integer.parseInt(fee);
            }
                
            //sorting the data based on selection sort
            for (int i = 0; i < priceTable.length; i++) {
                int min = i;
                for (int j = i + 1; j < priceTable.length; j++) {    
                    if (priceTable[j] < priceTable[min]){
                        min = j;
                    }
                }         
                //swapping values
                String IDTemp = flightID[min];
                flightID[min] = flightID[i];
                flightID[i] = IDTemp;

                String routeTemp = flightRoute[min];
                flightRoute[min] = flightRoute[i];
                flightRoute[i] = routeTemp;

                String companyTemp = company[min];
                company[min] = company[i];
                company[i] = companyTemp;
                
                int priceTemp = priceTable[min];
                priceTable[min] = priceTable[i];
                priceTable[i] = priceTemp;
            }
                
            //binary search
            int left = 0;
            int right = priceTable.length - 1;
            int value = Integer.parseInt(searchValue.getText());
            int output = searchPriceBinary(priceTable, left, right, value);     //intializing the variable as method

            if(output == -1){       //if searched result is not matched
                JOptionPane.showMessageDialog(rootPane, "Sorry, Flight with the price " + value + " is not available", "Information Message", 1);
            } else{         //if search result matches
                JOptionPane.showMessageDialog(rootPane,"Details of the flight matched with price "+ value +" is: \nFlight ID: "+flightID[output]+"\nFlight Route: "+flightRoute[output]+"\nCompany: "+company[output], "Flight Details", 1);
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    //binary search using recursive method
    public static int searchPriceBinary(int sortedPrice[], int left, int right, int value)
    {  
        if(left<=right){
            int mid = (left+right)/2;
            if(sortedPrice[mid]==value){
                return mid;
            } else if (value<sortedPrice[mid]){
                return searchPriceBinary(sortedPrice, left, mid-1, value);      
            } else {
                return searchPriceBinary(sortedPrice, mid+1, right, value);
            }
        }
        return -1;      //returns -1 if search result is not found
    }
    
    private void search2BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search2BtnActionPerformed
        if(companyOption.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(rootPane, "Select an option for searching.", "Option Not Selected", 2);
        } else {
            //getting number of rows in table
            int rowCount = airlineTable.getRowCount();
            //Declaring array
            String[] flightID = new String[rowCount];
            String[] company = new String[rowCount];
                
            //initializing arrays with the data from the table
            for (int i = 0; i < rowCount; i++){
                String ID = (String) airlineTable.getValueAt(i, 0);
                String companyName = (String) airlineTable.getValueAt(i, 2);
                flightID[i] = ID;
                company[i] = companyName;
            }
            
            String value = (String)companyOption.getSelectedItem();
            String[] output = searchCompanyLinear(company, value, flightID);    //calling method 
            String res = "The flights of "+value+" available are: ";
            if(output.length == 0){
                JOptionPane.showMessageDialog(rootPane, "Flights of "+ value + " are not found.","Search Details",1);
                return;
            }
            for(int i = 0;i<output.length;i++){
                int numbering = i + 1;
                res += "\n" + numbering + ") "+ output[i];
            }
            JOptionPane.showMessageDialog(rootPane, res,"Search Details",1);
        }
    }//GEN-LAST:event_search2BtnActionPerformed

    //linear search algorithm
    //it returns the array of String data type
    public static String[] searchCompanyLinear(String company[], String value, String flightID[]){   
        int count = 0;
        //gets the total number of matched values
        for(int i = 0; i< company.length; i++){
            if(value.equals(company[i])){
                count ++;
            }
        }   
        
        String search_match[] = new String[count];
        int j = 0;
        //adds flightID of matched results to array
        for(int i = 0; i< company.length; i++){
            if(value.equals(company[i])){
               String name = (String) flightID[i];
               search_match[j] = name;
               j = j + 1;   
            }
        }
        //returns array
        return search_match;  
    }
    
    private void sortCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortCBActionPerformed
        int selected_option = sortCB.getSelectedIndex();
        //calls the sort method based on the input of user
        if (selected_option == 0) {
            JOptionPane.showMessageDialog(rootPane, "Choose any Option.", "Option Not Selected", 2);
        } else if (selected_option == 1){   //for price ascending
            sort(1,0,4);
        } else if(selected_option == 2){    //for price descending
            sort(1,1,4);
        } else if (selected_option == 3){   //for company descending
            sort(2,1,2);
        } else if(selected_option == 4){    //for company ascending
            sort(2,0,2);
        }
    }//GEN-LAST:event_sortCBActionPerformed

    //type indicates whether the data is price or company. if price then value 1 is initialized else 2 is initialized
    //order indicates ascending or descending. Ascending = 0, Descending = 1
    //column indicates column index of data to be sorted
    public void sort(int type, int order, int column) {
        //rowCount gives the total rows in table
        int rowCount = airlineTable.getRowCount();
        
        // Creating a new array with size rowCount
        Object[] tableData = new Object[rowCount];
        
        // Storing the table moduleCode value in array a by traversing through table data       
        for (int i = 0; i < rowCount; i++) {
            String value = (String) airlineTable.getValueAt(i, column);                 
            if (value != null) {
                tableData[i] = value;
            }
        }  

        //selection sort algorithm
        for (int i = 0; i < tableData.length; i++) {
            int min = i;
            for (int j = i+1; j < tableData.length; j++) {
                //for price (int value)
                if(type == 1){
                    int second = Integer.parseInt((String) tableData[j]);
                    int mini = Integer.parseInt((String) tableData[min]);
                    if (order == 0) {   //for ascending
                        if(second < mini){
                            min = j;
                        }
                    } else {            //for descending
                        if (second > mini) {
                            min = j;
                        }
                    }
                //for company (string value)
                } else if(type == 2){
                    if (order == 0) {   //for ascending
                        if (tableData[j].toString().compareTo(tableData[min].toString())<0) {
                            min = j;
                        }
                    } else {            //for descending
                        if (tableData[j].toString().compareTo(tableData[min].toString())>0) {
                            min = j;
                        }
                    }               
                }
            }
            
            // swapping array values
            Object temp = tableData[min];
            tableData[min] = tableData[i];
            tableData[i] = temp;
            
            //swapping values in table
            String flightID = (String) airlineTable.getValueAt(i, 0);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 0), i, 0);
            airlineTable.setValueAt(flightID, min, 0);
            
            String route = (String) airlineTable.getValueAt(i, 1);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 1), i, 1);
            airlineTable.setValueAt(route, min, 1);
            
            String company = (String) airlineTable.getValueAt(i, 2);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 2), i, 2);
            airlineTable.setValueAt(company, min, 2);
            
            String category = (String) airlineTable.getValueAt(i, 3);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 3), i, 3);
            airlineTable.setValueAt(category, min, 3);
            
            String price = (String) airlineTable.getValueAt(i, 4);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 4), i, 4);
            airlineTable.setValueAt(price, min, 4);
            
            String seat = (String) airlineTable.getValueAt(i, 5);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 5), i, 5);
            airlineTable.setValueAt(seat, min, 5);
            
            String status = (String) airlineTable.getValueAt(i, 6);
            airlineTable.setValueAt(airlineTable.getValueAt(min, 6), i, 6);
            airlineTable.setValueAt(status, min, 6);
        }
    }
    
    private void goToAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToAddBtnActionPerformed
        mainPnl.setSelectedIndex(1);
    }//GEN-LAST:event_goToAddBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selected_row = airlineTable.getSelectedRow();
        //deletes the selected row from the table
        if(selected_row >= 0){
            DefaultTableModel model = (DefaultTableModel) airlineTable.getModel();
            model.removeRow(selected_row);
        }else{
            JOptionPane.showMessageDialog(rootPane, "Choose row to Delete!", "Error Message", 2);
        }       
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        int count = 0;
        //initializing path location of file
        File file = new File("../AirlineIS//TableData.csv");
        try{
            //calling read method with path as parameter
            read(file);    
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "File not found.", "Error Message", 2);
        }  
    }//GEN-LAST:event_openMenuActionPerformed

    private void searchValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchValueKeyPressed
        char search_value = evt.getKeyChar();
        //user can only enter digit, backspace and delete
        if(Character.isDigit(search_value) || (search_value == evt.VK_BACK_SPACE) || (search_value == evt.VK_DELETE)){
            searchValue.setEditable(true);
        }else{
            searchValue.setEditable(false);
            JOptionPane.showMessageDialog(rootPane, "Enter numeric values only.", "Alert Message", 2);
        }
    }//GEN-LAST:event_searchValueKeyPressed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //calling addValues method which returns array
        String[] data = addValues();

        int rowcount = airlineTable.getRowCount();
        int nextrow = 0;
        boolean emptyFlag = false;
        
        //checking if data is empty or not
        if (data[0].isEmpty() || data[1].isEmpty() || data[3].isEmpty() || data[4].isEmpty() || data[5].isEmpty() || data[6].isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Do not leave any fields empty.", "Empty Field", 2);
        } else {
            do {
                String id = (String) airlineTable.getValueAt(nextrow, 0);
                if (id == null || id.length() == 0) {       //checking if data is available in row
                    emptyFlag = true;
                } else if (id.equals(data[0])) {            //checking duplication of data
                    JOptionPane.showMessageDialog(rootPane, "Table already contains the details of mentioned Flight ID.", "Alert Message", 2);
                    return;
                } else {
                    nextrow++;
                }
            } while (nextrow < rowcount && !emptyFlag);
            
            //adding row
            if (nextrow >= rowcount){
                DefaultTableModel model = (DefaultTableModel) airlineTable.getModel();
                model.addRow(data);
            }
            
            int colcount = airlineTable.getColumnCount();
            //adding values to the row
            for (int i = 0; i < colcount; i++) {
                airlineTable.setValueAt(data[i], nextrow, i);
            }
            JOptionPane.showMessageDialog(rootPane, "Data added to the table successfully.", "Information Message", 1);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void priceTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTfKeyPressed
        char user_input = evt.getKeyChar();
        //user can enter only numbers and backspace
        if(Character.isDigit(user_input)||(user_input==evt.VK_BACK_SPACE)){
            priceTf.setEditable(true);
        }else{
            priceTf.setEditable(false);
            JOptionPane.showMessageDialog(rootPane,"Only Numberic value is allowed.", "Alert Message", 2);
        }
    }//GEN-LAST:event_priceTfKeyPressed

    private void seatTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seatTfKeyPressed
        char input = evt.getKeyChar();
        //user can enter only numbers and backspace
        if((Character.isDigit(input))||(input==evt.VK_BACK_SPACE)){
            seatTf.setEditable(true);
        }else{
            seatTf.setEditable(false);
            JOptionPane.showMessageDialog(rootPane,"Only Numberic value is allowed.", "Alert Message", 2);
        }
    }//GEN-LAST:event_seatTfKeyPressed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        String update_id = updateTf.getText();
        int row_no = -1;
        //gets the row number from the table to be updated
        for(int i = 0; i<airlineTable.getRowCount();i++){
            if(update_id.equals((String)airlineTable.getValueAt(i, 0))){
                row_no = i;
            }
        }
        String[] data = addValues();
        
        //checks if text fields are empty
        if (data[0].isEmpty() || data[1].isEmpty() || data[3].isEmpty() || data[4].isEmpty() || data[5].isEmpty() || data[6].isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Do not leave any fields empty!!!","Alert Message", 2);
        }else if(row_no == -1){     //if row not matches
            JOptionPane.showMessageDialog(rootPane, "Row not found", "Alert Message",2);
        } else {
            String id = (String) airlineTable.getValueAt(row_no, 0);
            int colcount = airlineTable.getColumnCount();
            //updating values in specific row of the table
            for (int i = 0; i < colcount; i++) {
                airlineTable.setValueAt(data[i], row_no, i);
            }
            JOptionPane.showMessageDialog(rootPane, "Row updated succesfully.", "Information Message", 1);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void routeTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_routeTfKeyPressed
        char userInput = evt.getKeyChar();
        //users can only enter alphabets, whitespace, backspace, shift and hyphen
        if((Character.isLetter(userInput))||(Character.isWhitespace(userInput))||(userInput==evt.VK_BACK_SPACE)||(evt.getKeyCode()==109)||(evt.getKeyCode()==16))
        {
            routeTf.setEditable(true);
        }
        else
        {
            routeTf.setEditable(false);
            JOptionPane.showMessageDialog(rootPane, "You can only enter hyphen(-) and alphabets.");
        }
    }//GEN-LAST:event_routeTfKeyPressed

    private void helpMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_helpMenuMenuSelected
        //initializing path location of a file
        File doc = new File("../AirlineIS//user_manual.pdf");
        //checks if desktop supports the program or not
        if(Desktop.isDesktopSupported()){
            try{
                //opens the file
                Desktop.getDesktop().open(doc);
            }catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, "User Manual Not Found.");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Action is not supported");
        }
    }//GEN-LAST:event_helpMenuMenuSelected

    private void idTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTfKeyPressed
        char userInput = evt.getKeyChar();
        //user can only enter alphabets, digits, backsapce and shift
        if((Character.isLetter(userInput))||(Character.isDigit(userInput))||(userInput==evt.VK_BACK_SPACE)||(evt.getKeyCode()==16)||(evt.getKeyCode()==20))
        {
            idTf.setEditable(true);
        }
        else
        {
            idTf.setEditable(false);
            JOptionPane.showMessageDialog(rootPane, "You can only enter numbers and alphabets.");
        }
    }//GEN-LAST:event_idTfKeyPressed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        //setting the textfields to empty
        idTf.setText("");
        routeTf.setText("");
        priceTf.setText("");
        seatTf.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed
 
    //gets values from textfields, combobox and radiobuttons
    //stores values in array and returns the array
    public String[] addValues(){
        String flightID = idTf.getText();
        String route = routeTf.getText();
        String company = (String) companyCb.getSelectedItem();
        String category = categoryBg.getSelection().getActionCommand();
        String price = priceTf.getText();
        String noOfSeat = seatTf.getText();
        String status = statusBg.getSelection().getActionCommand();

        //adding value in array
        String[] data = {flightID, route, company, category, price, noOfSeat, status};
        return data;
    }
    
    //reads every line of file and adds the values in table
    public void read(File file) throws FileNotFoundException{
        Scanner inputStream = new Scanner(file);
        while (inputStream.hasNextLine()) {                    
            String data = inputStream.nextLine();       //getting the lines of file
            String[] values = data.split(",");          //splitting lines by comma and storing in array
                             
            int rowCount = airlineTable.getRowCount();
            int columnCount = airlineTable.getColumnCount();
            int nextRow = 0;
            boolean emptyRowFlag = false;            
            do {
                String tableValue = (String) airlineTable.getValueAt(nextRow, 0);
                if (tableValue == null) {      
                    emptyRowFlag = true;
                }else if(tableValue.equals(values[0])){         //checks if file is already opened or not
                    JOptionPane.showMessageDialog(rootPane, "The data from this file is already loaded to the table.","Can Not Open File",1);
                    return;
                } else{
                    nextRow++;
                }    
            } while(nextRow < rowCount && !emptyRowFlag);
            
            //adds row to the table
            if (nextRow >= rowCount){
                DefaultTableModel model = (DefaultTableModel) airlineTable.getModel();
                model.addRow(values);
            }
            //adds values in the added row
            for (int i = 0; i < columnCount; i++){
                airlineTable.setValueAt(values[i], nextRow, i);
            } 
        } 
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirlineInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirlineInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirlineInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirlineInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirlineInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel addPnl;
    private javax.swing.JButton addValueBtn;
    private javax.swing.JTable airlineTable;
    private javax.swing.JRadioButton availableRb;
    private javax.swing.ButtonGroup categoryBg;
    private javax.swing.JLabel categoryLbl;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox<String> companyCb;
    private javax.swing.JLabel companyLbl;
    private javax.swing.JComboBox<String> companyOption;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JRadioButton domesticRb;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton goToAddBtn;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel homePnl;
    private javax.swing.JLabel idLbl;
    private javax.swing.JTextField idTf;
    private javax.swing.JRadioButton internationalRb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane mainPnl;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton notAvailableRb;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JTextField priceTf;
    private javax.swing.JLabel routeLbl;
    private javax.swing.JTextField routeTf;
    private javax.swing.JButton search2Btn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchValue;
    private javax.swing.JLabel seatLbl;
    private javax.swing.JTextField seatTf;
    private javax.swing.JComboBox<String> sortCB;
    private javax.swing.JLabel sortLbl;
    private javax.swing.ButtonGroup statusBg;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JPanel tablePnl;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title3Lbl;
    private javax.swing.JLabel titleLbl2;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField updateTf;
    private javax.swing.JLabel updateTxt;
    private javax.swing.JButton viewBtn;
    private javax.swing.JButton viewTableBtn;
    // End of variables declaration//GEN-END:variables
}
